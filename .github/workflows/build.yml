name: Linux with OpenCL, Cuda, and Rocm

on:
  workflow_dispatch:
    inputs:
      skip-publish:
        description: 'Skip publish'
        required: false
        default: '0'

jobs:
  ubuntu-latest:
    runs-on: ubuntu-22.04

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt install -y build-essential libsdl2-dev

      - name: Build
        run: |
          make -j main

      - name: Upload Binaries
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            main
  
    ubuntu-cuda-latest:
      runs-on: ubuntu-22.04

      steps:
        - name: Clone
          uses: actions/checkout@v4

        - name: Install CUDA
          uses: Jimver/cuda-toolkit@v0.2.15
          id: cuda-toolkit
          with:
              cuda: 12.4.1
              method: 'network'

        - name: Install Dependencies
          run: |
            sudo apt-get update
            sudo apt install -y build-essential libsdl2-dev

        - name: Build
          run: |
            GGML_CUDA=1 make -j main

        - name: Upload Binaries
          uses: actions/upload-artifact@v3
          with:
            name: build
            path: |
              main
  # windows:
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       build: [Release]
  #       arch: [Win32, x64]
  #       sdl2: [ON]
  #       include:
  #         - arch: Win32
  #           s2arc: x86
  #           jnaPath: win32-x86
  #         - arch: x64
  #           s2arc: x64
  #           jnaPath: win32-x86-64
  #         - sdl2: ON
  #           s2ver: 2.28.5

  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Add msbuild to PATH
  #       uses: microsoft/setup-msbuild@v2

  #     - name: Fetch SDL2 and set SDL2_DIR
  #       if: matrix.sdl2 == 'ON'
  #       run: |
  #         C:/msys64/usr/bin/wget.exe -qO sdl2.zip https://github.com/libsdl-org/SDL/releases/download/release-${{ matrix.s2ver }}/SDL2-devel-${{ matrix.s2ver }}-VC.zip
  #         7z x sdl2.zip
  #         echo "SDL2_DIR=$env:GITHUB_WORKSPACE/SDL2-${{ matrix.s2ver }}/cmake" >> $env:GITHUB_ENV

  #     - name: Configure
  #       run: >
  #         cmake -S . -B ./build -A ${{ matrix.arch }}
  #         -DCMAKE_BUILD_TYPE=${{ matrix.build }}
  #         -DWHISPER_SDL2=${{ matrix.sdl2 }}

  #     - name: Build
  #       run: |
  #         cd ./build
  #         msbuild ALL_BUILD.vcxproj -t:build -p:configuration=${{ matrix.build }} -p:platform=${{ matrix.arch }}

  #     - name: Copy SDL2.dll
  #       if: matrix.sdl2 == 'ON'
  #       run: copy "$env:SDL2_DIR/../lib/${{ matrix.s2arc }}/SDL2.dll" build/bin/${{ matrix.build }}

  #     - name: Upload dll
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ matrix.jnaPath }}_whisper.dll
  #         path: build/bin/${{ matrix.build }}/whisper.dll

  #     - name: Upload binaries
  #       if: matrix.sdl2 == 'ON'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: whisper-bin-${{ matrix.arch }}
  #         path: build/bin/${{ matrix.build }}

  # windows-blas:
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       build: [Release]
  #       arch: [Win32, x64]
  #       blas: [ON]
  #       sdl2: [ON]
  #       include:
  #         - arch: Win32
  #           obzip: https://github.com/OpenMathLib/OpenBLAS/releases/download/v0.3.25/OpenBLAS-0.3.25-x86.zip
  #           s2arc: x86
  #         - arch: x64
  #           obzip: https://github.com/OpenMathLib/OpenBLAS/releases/download/v0.3.25/OpenBLAS-0.3.25-x64.zip
  #           s2arc: x64
  #         - sdl2: ON
  #           s2ver: 2.28.5

  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Add msbuild to PATH
  #       uses: microsoft/setup-msbuild@v2

  #     - name: Fetch OpenBLAS
  #       if: matrix.blas == 'ON'
  #       run: |
  #         C:/msys64/usr/bin/wget.exe -qO blas.zip ${{ matrix.obzip }}
  #         7z x blas.zip -oblas -y
  #         copy blas/include/cblas.h .
  #         copy blas/include/openblas_config.h .
  #         echo "OPENBLAS_PATH=$env:GITHUB_WORKSPACE/blas" >> $env:GITHUB_ENV

  #     - name: Fetch SDL2 and set SDL2_DIR
  #       if: matrix.sdl2 == 'ON'
  #       run: |
  #         C:/msys64/usr/bin/wget.exe -qO sdl2.zip https://github.com/libsdl-org/SDL/releases/download/release-${{ matrix.s2ver }}/SDL2-devel-${{ matrix.s2ver }}-VC.zip
  #         7z x sdl2.zip
  #         echo "SDL2_DIR=$env:GITHUB_WORKSPACE/SDL2-${{ matrix.s2ver }}/cmake" >> $env:GITHUB_ENV

  #     - name: Configure
  #       run: >
  #         cmake -S . -B ./build -A ${{ matrix.arch }}
  #         -DCMAKE_BUILD_TYPE=${{ matrix.build }}
  #         -DGGML_OPENBLAS=${{ matrix.blas }}
  #         -DCMAKE_LIBRARY_PATH="$env:OPENBLAS_PATH/lib"
  #         -DWHISPER_SDL2=${{ matrix.sdl2 }}

  #     - name: Build
  #       run: |
  #         cd ./build
  #         msbuild ALL_BUILD.vcxproj -t:build -p:configuration=${{ matrix.build }} -p:platform=${{ matrix.arch }}

  #     - name: Copy libopenblas.dll
  #       if: matrix.blas == 'ON'
  #       run: copy "$env:OPENBLAS_PATH/bin/libopenblas.dll" build/bin/${{ matrix.build }}

  #     - name: Copy SDL2.dll
  #       if: matrix.sdl2 == 'ON'
  #       run: copy "$env:SDL2_DIR/../lib/${{ matrix.s2arc }}/SDL2.dll" build/bin/${{ matrix.build }}

  #     - name: Upload binaries
  #       if: matrix.blas == 'ON' && matrix.sdl2 == 'ON'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: whisper-blas-bin-${{ matrix.arch }}
  #         path: build/bin/${{ matrix.build }}

  # windows-cublas:
  #   runs-on: windows-2019

  #   strategy:
  #     matrix:
  #       build: [Release]
  #       arch: [x64]
  #       cublas: [ON]
  #       sdl2: [ON]
  #       cuda-toolkit: [12.2.0, 11.8.0]
  #       include:
  #         - arch: x64
  #           s2arc: x64
  #         - sdl2: ON
  #           s2ver: 2.28.5

  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Add msbuild to PATH
  #       uses: microsoft/setup-msbuild@v2

  #     - name: Install CUDA Toolkit
  #       id: cuda-toolkit
  #       uses: Jimver/cuda-toolkit@v0.2.15
  #       with:
  #         cuda: '${{ matrix.cuda-toolkit }}'

  #     - name: Fetch SDL2 and set SDL2_DIR
  #       if: matrix.sdl2 == 'ON'
  #       run: |
  #         C:/msys64/usr/bin/wget.exe -qO sdl2.zip https://github.com/libsdl-org/SDL/releases/download/release-${{ matrix.s2ver }}/SDL2-devel-${{ matrix.s2ver }}-VC.zip
  #         7z x sdl2.zip
  #         echo "SDL2_DIR=$env:GITHUB_WORKSPACE/SDL2-${{ matrix.s2ver }}/cmake" >> $env:GITHUB_ENV

  #     - name: Configure
  #       run: >
  #         cmake -S . -B ./build -A ${{ matrix.arch }}
  #         -DCMAKE_BUILD_TYPE=${{ matrix.build }}
  #         -DGGML_CUDA=${{ matrix.cublas }}
  #         -DWHISPER_SDL2=${{ matrix.sdl2 }}

  #     - name: Build ${{ matrix.cuda-toolkit }}
  #       run: |
  #         cd ./build
  #         cmake --build . --config ${{ matrix.build }}

  #     - name: Copy CUDA DLLs
  #       run: >
  #         Copy-Item -PassThru
  #         -Path "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin/*.dll"
  #         -Include cudart64_*,cublas64_*,cublasLt64_*
  #         -Destination build/bin/${{ matrix.build }}

  #     - name: Copy SDL2.dll
  #       if: matrix.sdl2 == 'ON'
  #       run: copy "$env:SDL2_DIR/../lib/${{ matrix.s2arc }}/SDL2.dll" build/bin/${{ matrix.build }}

  #     - name: Upload binaries
  #       if: matrix.sdl2 == 'ON'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: whisper-cublas-${{ matrix.cuda-toolkit }}-bin-${{ matrix.arch }}
  #         path: build/bin/${{ matrix.build }}
